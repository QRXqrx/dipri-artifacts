import sys
import os
import shutil

"""
Align fuzz-results generated by Zest
"""


def parse_selection_name(dirname: str) -> str:
    if dirname.startswith('zest_'):
        return 'zest'
    _parts = dirname.split('_')
    if _parts[0] == 'Hamming':
        _measure = 'H'
    elif _parts[0] == 'Jaccard':
        _measure = 'J'
    else:
        raise RuntimeError(f'Unrecognized measure: `{_parts[0]}`')
    if _parts[1] == 'noPeriod':
        _mode = 'V'
    elif _parts[1] == 'adaptive':
        _mode = 'A'
    elif _parts[1] == 'period1m':
        _mode = 'P'
    else:
        raise RuntimeError(f'Unrecognized mode: `{_parts[1]}`')
    return f'dist-{_mode}{_measure}'


def parse_target_name(dirname: str) -> str:
    _targets = ['ant', 'bcel', 'closure', 'rhino']
    for _target in _targets:
        # if _target in dirname:
        #     return _target
        _parts = dirname.split('.')
        if _target == _parts[-2]:
            return _target


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python3 <this_script> <zest_root> <dest_dir>')
        sys.exit(0)

    # Where to find raw zest data
    zest_root = os.path.abspath(sys.argv[1])
    # Where to output reorganized zest data
    dest_dir = os.path.abspath(sys.argv[2])

    # Create dest_dir
    if not os.path.isdir(dest_dir):
        os.makedirs(dest_dir, exist_ok=True)

    # Traverse zest directory
    out_cnt = 0
    for fn in sorted(os.listdir(zest_root)):
        # Directory preserving data for one round
        round_dir = os.path.join(zest_root, fn)
        if fn.startswith('.') or not os.path.isdir(round_dir):
            continue
        # Advance out_cnt
        out_cnt += 1
        # Traverse round dir
        for fn1 in sorted(os.listdir(round_dir)):
            # Get into fuzz results of certain target
            fuzz_results_dir = os.path.join(round_dir, fn1, 'fuzz-results')
            if fn1.startswith('.') or not os.path.isdir(fuzz_results_dir):
                continue
            # Parse name of selection strategy
            sel_name = parse_selection_name(dirname=fn1)
            for fn2 in sorted(os.listdir(fuzz_results_dir)):
                # Get into each target dir, which puts plot_data
                pd_dir = os.path.join(fuzz_results_dir, fn2, 'testWithGenerator')
                if fn2.startswith('.') or not os.path.isdir(pd_dir):
                    continue
                # Parse target name
                target_name = parse_target_name(dirname=fn2)
                # Create directory (aflpp-style name) and copy zest plot_data file to there
                new_pd_dir = os.path.join(dest_dir, sel_name, target_name,
                                          'outs', f'out-{out_cnt}', 'default')
                # Create
                os.makedirs(new_pd_dir, exist_ok=True)
                # Copy
                orig_pd_file = os.path.join(pd_dir, 'plot_data')
                shutil.copy(orig_pd_file, new_pd_dir)
                print(f'Copy {orig_pd_file} to {new_pd_dir}')
